org: bushjdo
app: serverless-udagram
service: serverless-udagram
frameworkVersion: '3'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    POST_TABLE: Udagram-${self:provider.stage}
    POST_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: phucvohoang-udagram-project-5-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    restApi: true

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  GetPosts:
    handler: src/lambda/http/getPosts.handler
    # runtime: nodejs12.x
    events:
      - http:
          method: get
          path: posts
          cors: true
          reqValidatorName: BodyValidator
          authorizer:
            name: Auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POST_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POST_TABLE}/index/${self:provider.environment.POST_CREATED_AT_INDEX}

  # TODO: Configure this function -
  CreatePost:
    handler: src/lambda/http/createPost.handler
    events:
      - http:
          method: post
          path: posts
          cors: true
          authorizer:
            name: Auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
          request:
            schemas:
              application/json: ${file(models/create-post-model.json)}
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POST_TABLE}'

  UpdatePost:
    handler: src/lambda/http/updatePost.handler
    events:
      - http:
          method: patch
          path: posts/{postId}
          cors: true
          authorizer:
            name: Auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
          request:
            schemas:
              application/json: ${file(models/update-post-model.json)}
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POST_TABLE}'
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'

  DeletePost:
    handler: src/lambda/http/deletePost.handler
    events:
      - http:
          method: delete
          path: posts/{postId}
          cors: true
          authorizer:
            name: Auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POST_TABLE}'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          cors: true
          method: post
          path: posts/{postId}/attachment
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POST_TABLE}'
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # TODO: Create a DynamoDB table with local secondary index and a composite key
    PostTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.POST_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: postId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: postId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.POST_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 93000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: Stmt1625306057759
              Effect: Allow
              Principal: '*'
              Action: s3:*
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
    BodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
